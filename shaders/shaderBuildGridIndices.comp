#version 310 es
precision mediump float;
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) uniform CbSimulationConstants
{
    uint  g_iNumParticles;
    float g_fTimeStep;
    float g_fSmoothlen;
    float g_fPressureStiffness;
    float g_fRestDensity;
    float g_fDensityCoef;
    float g_fGradPressureCoef;
    float g_fLapViscosityCoef;
    float g_fWallStiffness;
    vec4  g_vGravity;
    vec4  g_vGridDim;
    vec3  g_vPlanes[4];
} cbSimulationConstants;

layout(std140, binding = 1) buffer GridRO
{
    readonly int data[];
} gridRO;

layout(std140, binding = 2) buffer GridIndicesRW
{
    uvec2 data[];
} gridIndicesRW;

int GridGetKey(int keyvaluepair)
{
    return (keyvaluepair >> 16);
}

void main()
{
    int G_ID = int(gl_GlobalInvocationID.x);
    int G_ID_PREV = int((G_ID == 0) ? int(cbSimulationConstants.g_iNumParticles) : G_ID);
    G_ID_PREV--;
    int G_ID_NEXT = G_ID + 1;
    if (uint(G_ID_NEXT) == cbSimulationConstants.g_iNumParticles)
    {
        G_ID_NEXT = 0;
    }
    int cell = GridGetKey(gridRO.data[G_ID]);
    int cell_prev = GridGetKey(gridRO.data[G_ID_PREV]);
    int cell_next = GridGetKey(gridRO.data[G_ID_NEXT]);
    if (cell != cell_prev)
    {
        gridIndicesRW.data[cell].x = uint(G_ID);
    }
    if (cell != cell_next)
    {
        gridIndicesRW.data[cell].y = uint(G_ID + 1);
    }
}

