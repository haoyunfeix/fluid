#version 310 es
precision mediump float;
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec2 position;
    vec2 velocity;
};

struct ParticleForces
{
    vec2 acceleration;
};

struct ParticleDensity
{
    float density;
    float padding1;
    float padding2;
    float padding3;
};

layout(std140, binding = 0) uniform CbSimulationConstants
{
    uint  g_iNumParticles;
    float g_fTimeStep;
    float g_fSmoothlen;
    float g_fPressureStiffness;
    float g_fRestDensity;
    float g_fDensityCoef;
    float g_fGradPressureCoef;
    float g_fLapViscosityCoef;
    float g_fWallStiffness;
    vec4  g_vGravity;
    vec4  g_vGridDim;
    vec3  g_vPlanes[4];
} cbSimulationConstants;

layout(std140, binding = 1) buffer ParticlesRO
{
    Particle particles[];
} particlesRO;

layout(std140, binding = 2) buffer ParticlesDensityRO
{
    readonly ParticleDensity particles[];
} particlesDensityRO;

layout(std140, binding = 3) buffer ParticlesForcesRW
{
    ParticleForces particles[];
} particlesForcesRW;

float CalculatePressure(float density)
{
    return cbSimulationConstants.g_fPressureStiffness * max(pow(density / cbSimulationConstants.g_fRestDensity, 3.0f) - 1.0f, 0.0f);
}

vec2 CalculateGradPressure(float r, float P_pressure, float N_pressure, float N_density, vec2 diff)
{
    float h = cbSimulationConstants.g_fSmoothlen;
    float avg_pressure = 0.5f * (N_pressure + P_pressure);
    return cbSimulationConstants.g_fGradPressureCoef * avg_pressure / N_density * (h - r) * (h - r) / r * (diff);
}

vec2 CalculateLapVelocity(float r, vec2 P_velocity, vec2 N_velocity, float N_density)
{
    float h = cbSimulationConstants.g_fSmoothlen;
    vec2 vel_diff = (N_velocity - P_velocity);
    return cbSimulationConstants.g_fLapViscosityCoef / N_density * (h - r) * vel_diff;
}

void main()
{
    int P_ID = int(gl_GlobalInvocationID.x);
    vec2 P_position = particlesRO.particles[P_ID].position;
    vec2 P_velocity = particlesRO.particles[P_ID].velocity;
    float P_density = particlesDensityRO.particles[P_ID].density;
    float P_pressure = CalculatePressure(P_density);
    float h_sq = cbSimulationConstants.g_fSmoothlen * cbSimulationConstants.g_fSmoothlen;
    vec2 acceleration = vec2(0, 0);
    for (uint N_ID = 0u; N_ID < cbSimulationConstants.g_iNumParticles; N_ID++)
    {
        vec2 N_position = particlesRO.particles[N_ID].position;
        vec2 diff = N_position - P_position;
        float r_sq = dot(diff, diff);
        if (r_sq < h_sq && uint(P_ID) != N_ID)
        {
            vec2 N_velocity = particlesRO.particles[N_ID].velocity;
            float N_density = particlesDensityRO.particles[N_ID].density;
            float N_pressure = CalculatePressure(N_density);
            float r = sqrt(r_sq);
            acceleration += CalculateGradPressure(r, P_pressure, N_pressure, N_density, diff);
            acceleration += CalculateLapVelocity(r, P_velocity, N_velocity, N_density);
        }
    }
    particlesForcesRW.particles[P_ID].acceleration = acceleration / P_density;
}

