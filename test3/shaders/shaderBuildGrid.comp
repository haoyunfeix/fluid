#version 310 es
precision mediump float;
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec2 position;
    vec2 velocity;
};

struct Grid
{
    int grid;
    int padding1;
    int padding2;
    int padding3;
};

layout(std140, binding = 10) uniform CbSimulationConstants
{
    uint  g_iNumParticles;
    float g_fTimeStep;
    float g_fSmoothlen;
    float g_fPressureStiffness;
    float g_fRestDensity;
    float g_fDensityCoef;
    float g_fGradPressureCoef;
    float g_fLapViscosityCoef;
    float g_fWallStiffness;
    vec4  g_vGravity;
    vec4  g_vGridDim;
    vec3  g_vPlanes[4];
} cbSimulationConstants;

layout(std140, binding = 0) buffer ParticlesRO
{
    readonly Particle data[];
} particlesRO;

layout(std140, binding = 3) buffer GridRW
{
    Grid data[];
} gridRW;

vec2 GridCalculateCell(vec2 position)
{
    return clamp(position * cbSimulationConstants.g_vGridDim.xy + cbSimulationConstants.g_vGridDim.zw, vec2(0, 0), vec2(255, 255));
}

int GridConstuctKeyValuePair(vec2 xy, uint value)
{
    return int(dot(vec3(xy.yx, value), vec3(256 * 256 * 256, 256 * 256, 1)));
}

void main()
{
    int P_ID = int(gl_GlobalInvocationID.x);
    vec2 position = particlesRO.data[P_ID].position;
    vec2 grid_xy = GridCalculateCell(position);
    gridRW.data[P_ID].grid = GridConstuctKeyValuePair(vec2(grid_xy), uint(P_ID));
}

